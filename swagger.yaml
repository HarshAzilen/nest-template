openapi: 3.0.0
paths:
  /health-check:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /api/auth/sign-up:
    post:
      operationId: AuthController_signUp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpDto'
      responses:
        '400':
          description: Something is invalid on the request body
        '409':
          description: Email already in use
      tags: &ref_0
        - Auth
  /api/auth/sign-in:
    post:
      operationId: AuthController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInDto'
      responses:
        '200':
          description: Logs in the user and returns the access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseMapper'
        '400':
          description: Something is invalid on the request body
        '401':
          description: Invalid credentials or User is not confirmed
      tags: *ref_0
  /api/auth/refresh-access:
    post:
      operationId: AuthController_refreshAccess
      parameters: []
      responses:
        '200':
          description: Refreshes and returns the access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseMapper'
        '400':
          description: >-
            Something is invalid on the request body, or Token is invalid or
            expired
        '401':
          description: Invalid token
      tags: *ref_0
  /api/auth/logout:
    post:
      operationId: AuthController_logout
      parameters: []
      responses:
        '400':
          description: Something is invalid on the request body
        '401':
          description: Invalid token
      tags: *ref_0
  /user:
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        '200':
          description: ''
  /user/{uuid}:
    get:
      operationId: UserController_findOne
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    patch:
      operationId: UserController_update
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: UserController_remove
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /venueoperator:
    post:
      operationId: VenueoperatorController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVenueoperatorDto'
      responses:
        '201':
          description: ''
    get:
      operationId: VenueoperatorController_findAll
      parameters: []
      responses:
        '200':
          description: ''
  /venueoperator/{id}:
    get:
      operationId: VenueoperatorController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    patch:
      operationId: VenueoperatorController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVenueoperatorDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: VenueoperatorController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /event/sse:
    get:
      operationId: ServerSentEventController_sse
      parameters: []
      responses:
        '200':
          description: ''
info:
  title: API
  description: API docs
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    JWT:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignUpDto:
      type: object
      properties:
        password1:
          type: string
          description: New password
          minLength: 8
          maxLength: 35
        password2:
          type: string
          description: Password confirmation
          minLength: 1
        name:
          type: string
          description: The user name
          minLength: 3
          maxLength: 100
        email:
          type: string
          description: The user email
          example: example@gmail.com
          minLength: 5
          maxLength: 255
      required:
        - password1
        - password2
        - name
        - email
    SignInDto:
      type: object
      properties:
        emailOrUsername:
          type: string
          description: Username or email
          examples:
            - john.doe
            - john.doe@gmail.com
          minLength: 3
          maxLength: 255
        password:
          type: string
          description: User's password
          minLength: 1
      required:
        - emailOrUsername
        - password
    AuthResponseUserMapper:
      type: object
      properties:
        id:
          type: number
          description: User id
          example: 123
          minimum: 1
        name:
          type: string
          description: User name
          example: John Doe
          minLength: 3
          maxLength: 100
        username:
          type: string
          description: User username
          example: john.doe1
          minLength: 3
          maxLength: 106
        email:
          type: string
          description: User email
          example: example@gmail.com
          minLength: 5
          maxLength: 255
        createdAt:
          type: string
          description: User creation date
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          description: User last update date
          example: '2021-01-01T00:00:00.000Z'
      required:
        - id
        - name
        - username
        - email
        - createdAt
        - updatedAt
    AuthResponseMapper:
      type: object
      properties:
        accessToken:
          description: User
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          allOf:
            - $ref: '#/components/schemas/AuthResponseUserMapper'
      required:
        - accessToken
    CreateUserDto:
      type: object
      properties: {}
    UpdateUserDto:
      type: object
      properties: {}
    CreateVenueoperatorDto:
      type: object
      properties: {}
    UpdateVenueoperatorDto:
      type: object
      properties: {}
